package com.yubico.webauthn

import com.yubico.webauthn.data.RegistrationExtensionInputs
import org.scalatest.Matchers
import org.scalatest.FunSpec


class AppIdExtensionSpec extends FunSpec with Matchers {

  describe("19. If the attestation statement attStmt successfully verified but is not trustworthy per step 16 above, the Relying Party SHOULD fail the registration ceremony.") {
    it("The test case with self attestation succeeds, but reports attestation is not trusted.") {

      val extensions = RegistrationExtensionInputs.builder()


      // val testData = RegistrationTestData.FidoU2f.SelfAttestation
      // val steps = finishRegistration(
        // testData = testData,
        // allowUntrustedAttestation = true,
        // credentialRepository = Some(emptyCredentialRepository)
      // )
      // steps.run.getKeyId.getId should be (testData.response.getId)
      // steps.run.isAttestationTrusted should be (false)
    }

    describe("NOTE: However, if permitted by policy, the Relying Party MAY register the credential ID and credential public key but treat the credential as one with self attestation (see ยง6.3.3 Attestation Types). If doing so, the Relying Party is asserting there is no cryptographic proof that the public key credential has been generated by a particular authenticator model. See [FIDOSecRef] and [UAFProtocol] for a more detailed discussion.") {
      it("Nothing to test.") {}
    }
  }

}
