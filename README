java-webauthn-server
====================

image:https://travis-ci.org/Yubico/java-webauthn-server.svg?branch=master["Build Status", link="https://travis-ci.org/Yubico/java-webauthn-server"]
image:https://coveralls.io/repos/github/Yubico/java-webauthn-server/badge.svg["Coverage Status", link="https://coveralls.io/github/Yubico/java-webauthn-server"]

Server-side https://www.w3.org/TR/webauthn/[Web Authentication] library for
Java. Provides implementations of the
https://www.w3.org/TR/webauthn/#rp-operations[Relying Party operations] required
for a server to support Web Authentication. This includes registering
authenticators and authenticating registered authenticators.


== Dependency configuration

Maven:

----------
<dependency>
  <groupId>com.yubico</groupId>
  <artifactId>webauthn-server-core</artifactId>
  <version>1.0.0-RC2</version>
  <scope>compile</scope>
</dependency>
----------

Gradle:

----------
compile 'com.yubico:webauthn-server-core:1.0.0-RC2'
----------


== Features

- Generates request objects suitable as parameters to
  `navigator.credentials.create()` and `.get()`
- Performs all necessary
  https://www.w3.org/TR/webauthn/#rp-operations[validation logic] on the
  response from the client
- Optionally integrates with a "metadata service" to verify
  https://www.w3.org/TR/webauthn/#sctn-attestation[authenticator attestations]
  and annotate responses with additional authenticator metadata


=== Non-features

This library has no concept of accounts, sessions, permissions or identity
federation, and it's not an authentication framework; it only deals with
executing the WebAuthn authentication mechanism. Sessions, account management
and other higher level concepts can make use of this authentication mechanism,
but the authentication mechanism alone does not make a security system.


== Example Usage

See link:webauthn-server-demo[`webauthn-server-demo`] for a complete demo
server, which stores authenticator registrations temporarily in memory.


== Building

Use the included
https://docs.gradle.org/current/userguide/gradle_wrapper.html[Gradle wrapper] to
build the `.jar` artifact:

----------
$ ./gradlew :webauthn-server-core:jar
----------

The output is built in the `webauthn-server-core/build/libs/` directory, and the
version is derived from the most recent Git tag. Builds done on a tagged commit
will have a plain `x.y.z` version number, while a build on any other commit will
result in a version number containing the abbreviated commit hash.

Although the `.jar` artifact of this project can be used in JDK version 8 or
later, the project as a whole currently builds only in JDK 8. This is because
most tests are written in Scala, which
https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html#jdk-9\--up-compatibility-notes[currently
only supports JDK 8]. Therefore compiling the tests can currently only be done
in JDK 8, and so `./gradlew build` and similar tasks will fail in JDKs other
than 8.

To run the tests (requires JDK 8):

----------
$ ./gradlew check
----------

To run the http://pitest.org/[PIT mutation tests] (requires JDK 8):

----------
$ ./gradlew pitest
----------
