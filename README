java-webauthn-server
====================
:toc:
:toc-placement: macro
:toc-title:

image:https://travis-ci.org/Yubico/java-webauthn-server.svg?branch=master["Build Status", link="https://travis-ci.org/Yubico/java-webauthn-server"]
image:https://coveralls.io/repos/github/Yubico/java-webauthn-server/badge.svg["Coverage Status", link="https://coveralls.io/github/Yubico/java-webauthn-server"]

Server-side https://www.w3.org/TR/webauthn/[Web Authentication] library for
Java. Provides implementations of the
https://www.w3.org/TR/webauthn/#rp-operations[Relying Party operations] required
for a server to support Web Authentication. This includes registering
authenticators and authenticating registered authenticators.


[discrete]
== Table of contents

toc::[]


== Dependency configuration

Maven:

----------
<dependency>
  <groupId>com.yubico</groupId>
  <artifactId>webauthn-server-core</artifactId>
  <version>1.0.0-RC2</version>
  <scope>compile</scope>
</dependency>
----------

Gradle:

----------
compile 'com.yubico:webauthn-server-core:1.0.0-RC2'
----------


== Features

- Generates request objects suitable as parameters to
  `navigator.credentials.create()` and `.get()`
- Performs all necessary
  https://www.w3.org/TR/webauthn/#rp-operations[validation logic] on the
  response from the client
- Optionally integrates with a "metadata service" to verify
  https://www.w3.org/TR/webauthn/#sctn-attestation[authenticator attestations]
  and annotate responses with additional authenticator metadata


=== Non-features

This library has no concept of accounts, sessions, permissions or identity
federation, and it's not an authentication framework; it only deals with
executing the WebAuthn authentication mechanism. Sessions, account management
and other higher level concepts can make use of this authentication mechanism,
but the authentication mechanism alone does not make a security system.


== Quick start

Implement the
link:https://yubico.github.io/java-webauthn-server/webauthn-server-core/com/yubico/webauthn/CredentialRepository.html[`CredentialRepository`]
interface with your database access logic. See
link:webauthn-server-demo/src/main/java/demo/webauthn/InMemoryRegistrationStorage[`InMemoryRegistrationStorage`]
for an example.

Instantiate the
link:https://yubico.github.io/java-webauthn-server/webauthn-server-core/com/yubico/webauthn/RelyingParty.html[`RelyingParty`]
class:

[source,java]
----------
RelyingPartyIdentity rpIdentity = RelyingPartyIdentity.builder()
    .id("example.com")
    .name("Example Application")
    .build();

RelyingParty rp = RelyingParty.builder()
    .identity(rpIdentity)
    .credentialRepository(new MyCredentialRepository())
    .build();
----------


=== Registration

Initiate a registration ceremony:

[source,java]
----------
byte[] userHandle = new byte[64];
random.nextBytes(userHandle);

PublicKeyCredentialCreationOptions request = rp.startRegistration(StartRegistrationOptions.builder()
    .user(UserIdentity.builder()
        .name("alice")
        .displayName("Alice Hypothetical")
        .id(new ByteArray(userHandle))
        .build())
    .build());
----------

Serialize `request` to JSON and send it to the client:

[source,java]
----------
import com.fasterxml.jackson.databind.ObjectMapper;

ObjectMapper jsonMapper = new ObjectMapper()
    .configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)
    .setSerializationInclusion(Include.NON_ABSENT)
    .registerModule(new Jdk8Module());

String json = jsonMapper.writeValueAsString(request);
return json;
----------

Get the response from the client:

[source,java]
----------
String responseJson = /* ... */;
PublicKeyCredential<AuthenticatorAttestationResponse, ClientRegistrationExtensionOutputs> pkc =
    jsonMapper.readValue(responseJson, new TypeReference<PublicKeyCredential<AuthenticatorAttestationResponse, ClientRegistrationExtensionOutputs>>(){});
----------

Validate the response:

[source,java]
----------
try {
    RegistrationResult result = rp.finishRegistration(FinishRegistrationOptions.builder()
        .request(request)
        .response(pkc)
        .build());
} catch (RegistrationFailedException e) { /* ... */ }
----------

Update your database:

[source,java]
----------
storeCredential("alice", result.getKeyId(), result.getPublicKeyCose());
----------


=== Authentication

Initiate an authentication ceremony:


[source,java]
----------
AssertionRequest request = rp.startAssertion(StartAssertionOptions.builder()
    .username(Optional.of("alice"))
    .build());
String json = jsonMapper.writeValueAsString(request);
return json;
----------

Validate the response:

[source,java]
----------
String responseJson = /* ... */;

PublicKeyCredential<AuthenticatorAssertionResponse, ClientAssertionExtensionOutputs> pkc =
    jsonMapper.readValue(responseJson, new TypeReference<PublicKeyCredential<AuthenticatorAssertionResponse, ClientAssertionExtensionOutputs>>() {
});

try {
    AssertionResult result = rp.finishAssertion(FinishAssertionOptions.builder()
        .request(request)
        .response(pkc)
        .build());

    if (result.isSuccess()) {
        return result.getUsername();
    }
} catch (AssertionFailedException e) { /* ... */ }
throw new RuntimeException("Authentication failed");
----------

For more detailed example usage, see
link:webauthn-server-demo[`webauthn-server-demo`] for a complete demo server.


== Building

Use the included
https://docs.gradle.org/current/userguide/gradle_wrapper.html[Gradle wrapper] to
build the `.jar` artifact:

----------
$ ./gradlew :webauthn-server-core:jar
----------

The output is built in the `webauthn-server-core/build/libs/` directory, and the
version is derived from the most recent Git tag. Builds done on a tagged commit
will have a plain `x.y.z` version number, while a build on any other commit will
result in a version number containing the abbreviated commit hash.

Although the `.jar` artifact of this project can be used in JDK version 8 or
later, the project as a whole currently builds only in JDK 8. This is because
most tests are written in Scala, which
https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html#jdk-9\--up-compatibility-notes[currently
only supports JDK 8]. Therefore compiling the tests can currently only be done
in JDK 8, and so `./gradlew build` and similar tasks will fail in JDKs other
than 8.

To run the tests (requires JDK 8):

----------
$ ./gradlew check
----------

To run the http://pitest.org/[PIT mutation tests] (requires JDK 8):

----------
$ ./gradlew pitest
----------
