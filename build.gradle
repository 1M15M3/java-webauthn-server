buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
  }
}
plugins {
  id 'com.github.kt3k.coveralls' version '2.8.1'
  id 'io.codearte.nexus-staging' version '0.9.0'
  id 'net.researchgate.release' version '2.4.0'
}

project.ext.publishEnabled = System.env.CI != 'true'

if (publishEnabled) {
  nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    stagingProfileId = '6c61426e6529d'
  }
}

allprojects  {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'jacoco'

  task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
  }

  group = 'com.yubico'
  version = '0.16.1-SNAPSHOT'

  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  repositories {
    mavenLocal()

    maven { url "http://repo.maven.apache.org/maven2" }
  }
}

subprojects {
  task packageSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
  artifacts.archives packageSources

  task packageJavadoc(type: Jar) {
    classifier = 'javadoc'
    inputs.files javadoc.outputs
    from javadoc.destinationDir
  }
  artifacts.archives packageJavadoc

  dependencies {

    testCompile(
      [group: 'junit', name: 'junit', version:'4.12'],
      [group: 'org.mockito', name: 'mockito-all', version:'2.0.2-beta'],
    )

  }

  if (publishEnabled) {
    uploadArchives {
      repositories {
        mavenDeployer {
          repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }
        }
      }
    }
  }

}

configure(subprojects.findAll { it.name != 'u2flib-server-demo' }) {
  apply plugin: 'info.solidsoft.pitest'

  pitest {
    timestampedReports = false
    outputFormats = ['XML', 'HTML']
  }
}

task jacocoMerge(type: JacocoMerge) {
  subprojects.each { subproject ->
    executionData subproject.tasks.withType(Test)
  }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'

  inputs.files jacocoMerge.outputs.files

  additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(subprojects.sourceSets.main.output)
  executionData jacocoMerge.destinationFile

  reports {
    html.enabled = true
    xml.enabled = true
  }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = jacocoRootReport.outputs.files.find { it.name == 'jacocoRootReport.xml' }
}
tasks.coveralls {
  inputs.files jacocoRootReport.outputs.files
}
