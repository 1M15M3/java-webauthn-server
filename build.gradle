buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
  }
}
plugins {
  id 'com.github.kt3k.coveralls' version '2.8.1'
  id 'io.codearte.nexus-staging' version '0.9.0'
  id 'net.researchgate.release' version '2.4.0'
}

import com.yubico.gradle.plugins.signing.GpgSigningPlugin

project.ext.publishEnabled = System.env.CI != 'true'

if (publishEnabled) {
  nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    stagingProfileId = '6c61426e6529d'
  }
}

allprojects  {
  apply plugin: 'java'
  apply plugin: 'maven'

  if (publishEnabled) {
    apply plugin: GpgSigningPlugin
    signing {
      sign configurations.archives
    }
  }

  task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
  }

  group = 'com.yubico'
  version = '0.17.0'

  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  repositories {
    mavenLocal()

    maven { url "http://repo.maven.apache.org/maven2" }
  }
}

subprojects {
  task packageSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
  artifacts.archives packageSources

  task packageJavadoc(type: Jar) {
    classifier = 'javadoc'
    inputs.files javadoc.outputs
    from javadoc.destinationDir
  }
  artifacts.archives packageJavadoc

  dependencies {

    compile(
      [group: 'org.projectlombok', name: 'lombok', version:'1.16.18'],
      'org.slf4j:slf4j-api:1.7.25',
    )

    testCompile(
      [group: 'junit', name: 'junit', version:'4.12'],
      [group: 'org.mockito', name: 'mockito-core', version:'2.8.47'],
    )

    testRuntime(
      'org.slf4j:slf4j-simple:1.7.25',
    )

  }

  if (publishEnabled) {
    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }
        }
      }
    }
  }

}

configure(subprojects.findAll { it.name != 'u2flib-server-demo' }) {
  apply plugin: 'info.solidsoft.pitest'

  pitest {
    pitestVersion = '1.2.2'
    timestampedReports = false
    outputFormats = ['XML', 'HTML']

    avoidCallsTo = [
      'java.util.logging',
      'org.apache.log4j',
      'org.slf4j',
      'org.apache.commons.logging',
      'com.google.common.io.Closeables',
    ]
  }
}

task pitestMerge(type: com.yubico.gradle.pitest.tasks.PitestMergeTask)

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
}
tasks.coveralls {
  inputs.files pitestMerge.outputs.files
}
